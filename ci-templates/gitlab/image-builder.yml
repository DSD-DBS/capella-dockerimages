# SPDX-FileCopyrightText: Copyright DB Netz AG and the capella-collab-manager contributors
# SPDX-License-Identifier: Apache-2.0
# yaml-language-server: $schema=https://gitlab.com/gitlab-org/gitlab/-/raw/master/app/assets/javascripts/editor/schema/ci.json

variables:
  BASE:
    value: "1"
    description: "Build the base image?"
  CAPELLA_BASE:
    value: "1"
    description: "Build the capella/base image?"
  CAPELLA_CLI:
    value: "1"
    description: "Build the capella/cli image?"
  CAPELLA_REMOTE:
    value: "0"
    description: "Build the capella/remote image?"
  T4C_CLIENT_BASE:
    value: "1"
    description: "Build the t4c/client/base image?"
  T4C_CLIENT_BACKUP:
    value: "1"
    description: "Build the t4c/client/backup image?"
  T4C_CLIENT_EXPORTER:
    value: "1"
    description: "Build the t4c/client/exporter image?"
  T4C_CLIENT_REMOTE:
    value: "1"
    description: "Build the t4c/client/remote image?"
  T4C_CLIENT_REMOTE_PURE_VARIANTS:
    value: "1"
    description: "Build the t4c/client/remote/pure-variants image?"
  CAPELLA_EASE:
    value: "1"
    description: "Build the capella/ease image?"
  CAPELLA_EASE_REMOTE:
    value: "1"
    description: "Build the capella/ease/remote image?"
  CAPELLA_READONLY:
    value: "1"
    description: "Build the capella/readonly image?"
  T4C_CLIENT_EASE:
    value: "0"
    description: "Build the t4c/client/ease image?"
  T4C_CLIENT_EASE_REMOTE:
    value: "0"
    description: "Build the t4c/client/ease/remote image?"
  T4C_CLIENT_EASE_REMOTE_DEBUG:
    value: "0"
    description: "Build the t4c/client/ease/remote/debug image?"
  JUPYTER:
    value: "0"
    description: "Build the jupyter-notebook image?"
  CAPELLA_DOCKER_IMAGES_REVISION:
    value: "main"
    description: "Revision of the Capella Docker images Github repository (https://github.com/DSD-DBS/capella-dockerimages)"
  CAPELLA_VERSION:
    value: "6.0.0"
    description: "Capella version. Please make sure that a subdirectory with the name of the value exists. The value must be valid ASCII and may contain lowercase and uppercase letters, digits, underscores, periods and dashes."
  JUPYTER_VERSION:
    value: "python-3.11"
    description: "Python version for the jupyter notebook."
  DOCKER_BUILD_ARGS: "--no-cache"
  BUILD_ARCHITECTURE: amd64

default:
  image: $DOCKER_REGISTRY/base
  tags:
    - docker
  before_script:
    - &baseImageTag export BASE_IMAGE_TAG=$(echo $CAPELLA_DOCKER_IMAGES_REVISION | sed 's/[^a-zA-Z0-9.]/-/g')-$CI_COMMIT_REF_NAME
    - export DOCKER_TAG=$CAPELLA_VERSION-$BASE_IMAGE_TAG
    - >
      if [[ "$BASE_IMAGE" == "$DOCKER_REGISTRY/base2" ]]; then
        export BASE_IMAGE=$BASE_IMAGE:$BASE_IMAGE_TAG;
      else
        export BASE_IMAGE=$BASE_IMAGE:$DOCKER_TAG;
      fi

.github: &github
  - git clone --recurse-submodules https://github.com/DSD-DBS/capella-dockerimages.git
  - cd capella-dockerimages
  - git checkout $CAPELLA_DOCKER_IMAGES_REVISION

.docker: &docker
  - docker info
  - docker login -u $DOCKER_REGISTRY_USER -p $DOCKER_REGISTRY_PASSWORD $DOCKER_REGISTRY
  - docker pull $BASE_IMAGE

.push: &push
  - docker push $IMAGE:$DOCKER_TAG

.ease: &ease
  - cp -R ../ease/extensions/* ease/extensions/

.prepare: &prepare
  - cd $CAPELLA_VERSION
  - *github

base:
  stage: build
  needs: []
  rules:
    - if: '$BASE == "1"'
      when: always
  variables:
    BASE_IMAGE: debian:bullseye
    IMAGE: $DOCKER_REGISTRY/base2
  before_script:
    - *baseImageTag
    - export DOCKER_TAG=$BASE_IMAGE_TAG
  script:
    - *prepare
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $IMAGE:$DOCKER_TAG \
        --build-arg UID=$UID_ENV \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        base
    - *push

capella/base:
  stage: build
  needs:
    - job: base
      optional: true
  rules:
    - if: '$CAPELLA_BASE == "1"'
      when: always
  variables:
    BASE_IMAGE: $DOCKER_REGISTRY/base2
    IMAGE: $DOCKER_REGISTRY/capella/base
  script:
    - *prepare
    - *docker
    - mv ../capella.tar.gz ./capella/versions/$CAPELLA_VERSION/$BUILD_ARCHITECTURE/capella.tar.gz
    - mv ../dropins/* ./capella/versions/$CAPELLA_VERSION/dropins/
    - mv ../../libs/* ./capella/libs/
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $DOCKER_REGISTRY/capella/base:$DOCKER_TAG \
        --build-arg BUILD_TYPE=offline \
        --build-arg CAPELLA_VERSION=$CAPELLA_VERSION \
        --build-arg INJECT_PACKAGES=true \
        --build-arg BUILD_ARCHITECTURE="$BUILD_ARCHITECTURE" \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        capella
    - *push

capella/cli:
  stage: build
  needs:
    - job: capella/base
      optional: true
  rules:
    - if: '$CAPELLA_CLI == "1"'
      when: always
  variables:
    BASE_IMAGE: $DOCKER_REGISTRY/capella/base
    IMAGE: $DOCKER_REGISTRY/capella/cli
  script:
    - *prepare
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
      -t $DOCKER_REGISTRY/capella/cli:$DOCKER_TAG \
      --build-arg BASE_IMAGE=$BASE_IMAGE \
      cli
    - *push

capella/remote:
  stage: build
  needs:
    - job: capella/base
      optional: true
  rules:
    - if: '$CAPELLA_REMOTE == "1"'
      when: always
  variables:
    BASE_IMAGE: $DOCKER_REGISTRY/capella/base
    IMAGE: $DOCKER_REGISTRY/capella/remote
  script:
    - *prepare
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
      -t $DOCKER_REGISTRY/capella/remote:$DOCKER_TAG \
      --build-arg BASE_IMAGE=$BASE_IMAGE \
      remote
    - *push

t4c/client/base:
  stage: build
  needs:
    - job: capella/base
      optional: true
  rules:
    - if: '$T4C_CLIENT_BASE == "1"'
      when: always
  variables:
    BASE_IMAGE: $DOCKER_REGISTRY/capella/base
    IMAGE: $DOCKER_REGISTRY/t4c/client/base
  script:
    - *prepare
    - *docker
    - mv ../updateSite/* t4c/updateSite/$CAPELLA_VERSION/
    - |
      docker build $DOCKER_BUILD_ARGS \
      -t $DOCKER_REGISTRY/t4c/client/base:$DOCKER_TAG \
      --build-arg CAPELLA_VERSION=$CAPELLA_VERSION \
      --build-arg BASE_IMAGE=$BASE_IMAGE \
      t4c
    - *push

t4c/client/backup:
  stage: build
  needs:
    - job: t4c/client/base
      optional: true
  rules:
    - if: '$T4C_CLIENT_BACKUP == "1"'
      when: always
  variables:
    BASE_IMAGE: $DOCKER_REGISTRY/t4c/client/base
    IMAGE: $DOCKER_REGISTRY/t4c/client/backup
  script:
    - *prepare
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
      -t $DOCKER_REGISTRY/t4c/client/backup:$DOCKER_TAG \
      --build-arg BASE_IMAGE=$BASE_IMAGE \
      --build-arg CAPELLA_VERSION=$CAPELLA_VERSION \
      backups
    - *push

t4c/client/exporter:
  stage: build
  needs:
    - job: t4c/client/base
      optional: true
  rules:
    - if: $CAPELLA_VERSION =~ /^5\.\d+\.\d+$/
      when: never
    - if: '$T4C_CLIENT_EXPORTER == "1"'
      when: always
  variables:
    BASE_IMAGE: $DOCKER_REGISTRY/t4c/client/base
    IMAGE: $DOCKER_REGISTRY/t4c/client/exporter
  script:
    - *prepare
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
      -t $DOCKER_REGISTRY/t4c/client/exporter:$DOCKER_TAG \
      --build-arg BASE_IMAGE=$BASE_IMAGE \
      --build-arg CAPELLA_VERSION=$CAPELLA_VERSION \
      exporter
    - *push

t4c/client/remote:
  stage: build
  needs:
    - job: t4c/client/base
      optional: true
  rules:
    - if: '$T4C_CLIENT_REMOTE == "1"'
      when: always
  variables:
    BASE_IMAGE: $DOCKER_REGISTRY/t4c/client/base
    IMAGE: $DOCKER_REGISTRY/t4c/client/remote
  script:
    - *prepare
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
      -t $DOCKER_REGISTRY/t4c/client/remote:$DOCKER_TAG \
      --build-arg BASE_IMAGE=$BASE_IMAGE \
      remote
    - *push

t4c/client/remote/pure-variants:
  stage: build
  needs:
    - job: t4c/client/remote
      optional: true
  rules:
    - if: '$T4C_CLIENT_REMOTE_PURE_VARIANTS == "1"'
      when: always
  variables:
    BASE_IMAGE: $DOCKER_REGISTRY/t4c/client/remote
    IMAGE: $DOCKER_REGISTRY/t4c/client/remote/pure-variants
  script:
    - *prepare
    - *docker
    - mv ../../pure-variants/dependencies/* pure-variants/dependencies/
    - mv ../../pure-variants/updateSite/* pure-variants/updateSite/
    - |
      docker build $DOCKER_BUILD_ARGS \
      -t $DOCKER_REGISTRY/t4c/client/remote/pure-variants:$DOCKER_TAG \
      --build-arg BUILD_TYPE=offline \
      --build-arg BASE_IMAGE=$BASE_IMAGE \
      pure-variants
    - *push

capella/ease:
  stage: build
  needs:
    - job: capella/base
      optional: true
  rules:
    - if: '$CAPELLA_EASE == "1"'
      when: always
  variables:
    BASE_IMAGE: $DOCKER_REGISTRY/capella/base
    IMAGE: $DOCKER_REGISTRY/capella/ease
  script:
    - *prepare
    - *docker
    - *ease
    - |
      docker build $DOCKER_BUILD_ARGS \
      -t $DOCKER_REGISTRY/capella/ease:$DOCKER_TAG \
      --build-arg BUILD_TYPE=offline \
      --build-arg BASE_IMAGE=$BASE_IMAGE \
      ease
    - *push

capella/ease/remote:
  stage: build
  needs:
    - job: capella/ease
      optional: true
  rules:
    - if: '$CAPELLA_EASE_REMOTE == "1"'
      when: always
  variables:
    BASE_IMAGE: $DOCKER_REGISTRY/capella/ease
    IMAGE: $DOCKER_REGISTRY/capella/ease/remote
  script:
    - *prepare
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
      -t $DOCKER_REGISTRY/capella/ease/remote:$DOCKER_TAG \
      --build-arg BASE_IMAGE=$BASE_IMAGE \
      remote
    - *push

capella/readonly:
  stage: build
  needs:
    - job: capella/ease/remote
      optional: true
  rules:
    - if: '$CAPELLA_READONLY == "1"'
      when: always
  variables:
    BASE_IMAGE: $DOCKER_REGISTRY/capella/ease/remote
    IMAGE: $DOCKER_REGISTRY/capella/readonly
  script:
    - *prepare
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
      -t $DOCKER_REGISTRY/capella/readonly:$DOCKER_TAG \
      --build-arg BASE_IMAGE=$BASE_IMAGE \
      readonly
    - *push

t4c/client/ease:
  stage: build
  needs:
    - job: t4c/client/base
      optional: true
  rules:
    - if: '$T4C_CLIENT_EASE == "1"'
      when: always
  variables:
    BASE_IMAGE: $DOCKER_REGISTRY/t4c/client/base
    IMAGE: $DOCKER_REGISTRY/t4c/client/ease
  script:
    - *prepare
    - *docker
    - *ease
    - |
      docker build $DOCKER_BUILD_ARGS \
      -t $DOCKER_REGISTRY/t4c/client/ease:$DOCKER_TAG \
      --build-arg BUILD_TYPE=offline \
      --build-arg BASE_IMAGE=$BASE_IMAGE \
      ease
    - *push

t4c/client/ease/remote:
  stage: build
  needs:
    - job: t4c/client/ease
      optional: true
  rules:
    - if: '$T4C_CLIENT_EASE_REMOTE == "1"'
      when: always
  variables:
    BASE_IMAGE: $DOCKER_REGISTRY/t4c/client/ease
    IMAGE: $DOCKER_REGISTRY/t4c/client/ease/remote
  script:
    - *prepare
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
      -t $IMAGE:$DOCKER_TAG \
      --build-arg BASE_IMAGE=$BASE_IMAGE \
      remote
    - *push

t4c/client/ease/remote/debug:
  stage: build
  needs:
    - job: t4c/client/ease/remote
      optional: true
  rules:
    - if: '$T4C_CLIENT_EASE_REMOTE_DEBUG == "1"'
      when: always
  variables:
    BASE_IMAGE: $DOCKER_REGISTRY/t4c/client/ease/remote
    IMAGE: $DOCKER_REGISTRY/t4c/client/ease/remote/debug
  script:
    - *prepare
    - *docker
    - mkdir -p ease/debug/libs
    - mv ../ease/debug/code.deb ease/debug/libs/code.deb
    - |
      docker build $DOCKER_BUILD_ARGS \
      -t $IMAGE:$DOCKER_TAG \
      --build-arg NETWORK_ACCESS=restricted \
      --build-arg BASE_IMAGE=$BASE_IMAGE \
      ease/debug
    - *push

jupyter:
  stage: build
  needs:
    - job: base
      optional: true
  rules:
    - if: '$JUPYTER == "1"'
      when: always
  variables:
    BASE_IMAGE: $DOCKER_REGISTRY/base2
    IMAGE: $DOCKER_REGISTRY/jupyter-notebook
  script:
    - export DOCKER_TAG=python-3.11-$BASE_IMAGE_TAG
    - *prepare
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
      -t $IMAGE:$DOCKER_TAG \
      --build-arg BASE_IMAGE=$BASE_IMAGE \
      jupyter-notebook
    - *push
