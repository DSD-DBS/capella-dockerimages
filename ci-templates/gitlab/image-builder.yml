# SPDX-FileCopyrightText: Copyright DB InfraGO AG and contributors
# SPDX-License-Identifier: Apache-2.0

variables:
  BASE:
    value: '0'
    options: ['0', '1']
    description: 'Build the base image?'
  CAPELLA_BASE:
    value: '0'
    options: ['0', '1']
    description: 'Build the capella/base image?'
  CAPELLA_REMOTE:
    value: '0'
    options: ['0', '1']
    description: 'Build the capella/remote image?'
  T4C_CLIENT_BASE:
    value: '0'
    options: ['0', '1']
    description: 'Build the t4c/client/base image?'
  T4C_CLIENT_REMOTE:
    value: '0'
    options: ['0', '1']
    description: 'Build the t4c/client/remote image?'
  T4C_CLIENT_REMOTE_PURE_VARIANTS:
    value: '0'
    options: ['0', '1']
    description: 'Build the t4c/client/remote/pure-variants image?'
  JUPYTER:
    value: '0'
    options: ['0', '1']
    description: 'Build the jupyter-notebook image?'
  PAPYRUS_BASE:
    value: '0'
    options: ['0', '1']
    description: 'Build the papyrus/base image?'
  PAPYRUS_REMOTE:
    value: '0'
    options: ['0', '1']
    description: 'Build the papyrus/remote image?'
  ECLIPSE_BASE:
    value: '0'
    options: ['0', '1']
    description: 'Build the eclipse/base image?'
  ECLIPSE_REMOTE:
    value: '0'
    options: ['0', '1']
    description: 'Build the eclipse/remote image?'
  ECLIPSE_REMOTE_PURE_VARIANTS:
    value: '0'
    options: ['0', '1']
    description: 'Build the eclipse/remote/pure-variants image?'
  CAPELLA_DOCKER_IMAGES_REVISION:
    value: 'main'
    description:
      'Revision of the Capella Docker images Github repository
      (https://github.com/DSD-DBS/capella-dockerimages)'
  CAPELLA_VERSION:
    value: '6.0.0'
    options: ['5.0.0', '5.2.0', '6.0.0', '6.1.0', '7.0.0']
    description:
      'Capella version. Please make sure that a subdirectory with the name of
      the value exists. The value must be valid ASCII and may contain lowercase
      and uppercase letters, digits, underscores, periods and dashes.'
  BUILD_FOR_LATEST_TAG:
    value: '0'
    options: ['0', '1']
    description:
      "Fetch the latest tag for the image builder repository and use it as
      revision. If 0, '$CI_COMMIT_REF_NAME' will be used."
  JUPYTER_VERSION:
    value: 'python-3.11'
    description: 'Python version for the jupyter notebook.'
  PAPYRUS_VERSION:
    value: '6.4.0'
    description: 'Semantic version of Papyrus.'
  ECLIPSE_VERSION:
    value: '4.27'
    description: 'Semantic version of Eclipse.'
  ENVIRONMENT:
    value: 'staging'
    description:
      'Specifies the environment. Make sure that all related environment
      variables are set on the repository level. More information in the
      documentation.'
  DOCKER_BUILD_ARGS: '--no-cache'
  BUILD_ARCHITECTURE: amd64
  PURE_VARIANTS_VERSION: '6.0.1'
  XPRA_REGISTRY: 'https://xpra.org'
  ECLIPSE_REPOSITORY: 'https://download.eclipse.org'

stages:
  - build

default:
  image: $DOCKER_REGISTRY/base
  tags:
    - docker

.github: &github
  - git clone https://github.com/DSD-DBS/capella-dockerimages.git
  - cd capella-dockerimages
  - git checkout $CAPELLA_DOCKER_IMAGES_REVISION --

.docker: &docker
  - docker info
  - DOCKER_REGISTRY_USER_QUERY=DOCKER_REGISTRY_USER_${ENVIRONMENT_UPPERCASE}
  - DOCKER_REGISTRY_PASSWORD_QUERY=DOCKER_REGISTRY_PASSWORD_${ENVIRONMENT_UPPERCASE}
  # prettier-ignore
  - echo ${!DOCKER_REGISTRY_PASSWORD_QUERY:?} | docker login -u ${!DOCKER_REGISTRY_USER_QUERY:?} --password-stdin $DOCKER_REGISTRY
  - docker pull $BASE_IMAGE

.push: &push
  - docker push $IMAGE:$DOCKER_TAG

.prepare: &prepare
  - ENVIRONMENT_UPPERCASE=$(echo ${ENVIRONMENT:?} | tr '[:lower:]' '[:upper:]')
  - DOCKER_REGISTRY_QUERY=DOCKER_REGISTRY_${ENVIRONMENT_UPPERCASE}
  - DOCKER_REGISTRY=${!DOCKER_REGISTRY_QUERY:?}
  - >
    if [[ "$BUILD_FOR_LATEST_TAG" == "1" ]]; then
      git fetch --tags;
      IMAGE_BUILDER_REVISION=$(git describe --tags --abbrev=0);
      git checkout "$IMAGE_BUILDER_REVISION";
    else
      IMAGE_BUILDER_REVISION="$CI_COMMIT_REF_NAME"
    fi
  # prettier-ignore
  - GENERAL_IMAGE_TAG=$(echo $CAPELLA_DOCKER_IMAGES_REVISION | sed 's/[^a-zA-Z0-9.]/-/g')-$IMAGE_BUILDER_REVISION
  - IMAGE=${DOCKER_REGISTRY}/$IMAGE

.resolve-base-image: &resolve-base-image
  - BASE_IMAGE=${DOCKER_REGISTRY}/${BASE_IMAGE}
  - >
    if [[ "$BASE_IMAGE" == "$DOCKER_REGISTRY/base2" ]]; then
      BASE_IMAGE=$BASE_IMAGE:$GENERAL_IMAGE_TAG;
    else
      BASE_IMAGE=$BASE_IMAGE:$DOCKER_TAG;
    fi

.prepare-capella: &prepare-capella
  - *prepare
  - export DOCKER_TAG=$CAPELLA_VERSION-$GENERAL_IMAGE_TAG
  - *resolve-base-image
  - cd capella/versions/$CAPELLA_VERSION
  - *github

.prepare-papyrus: &prepare-papyrus
  - *prepare
  - export DOCKER_TAG=$PAPYRUS_VERSION-$GENERAL_IMAGE_TAG
  - *resolve-base-image
  - cd papyrus/versions/$PAPYRUS_VERSION
  - *github

.prepare-eclipse: &prepare-eclipse
  - *prepare
  - export DOCKER_TAG=$ECLIPSE_VERSION-$GENERAL_IMAGE_TAG
  - *resolve-base-image
  - cd eclipse/versions/$ECLIPSE_VERSION
  - *github

.prepare-eclipse-pv: &prepare-eclipse-pv
  - *prepare
  # prettier-ignore
  - export DOCKER_TAG=$ECLIPSE_VERSION-$PURE_VARIANTS_VERSION-$GENERAL_IMAGE_TAG
  - BASE_IMAGE="${DOCKER_REGISTRY}/${BASE_IMAGE}:$ECLIPSE_VERSION-$GENERAL_IMAGE_TAG"
  - cd pure-variants
  - *github

base:
  stage: build
  needs: []
  rules:
    - if: '$BASE == "1"'
      when: always
  variables:
    BASE_IMAGE: debian:bookworm
    IMAGE: base2
  script:
    - *prepare
    - DOCKER_TAG=$GENERAL_IMAGE_TAG
    - *github
    - *docker
    - UID_QUERY=UID_${ENVIRONMENT_UPPERCASE}
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $IMAGE:$DOCKER_TAG \
        --build-arg UID=${!UID_QUERY} \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        base
    - *push

capella/base:
  stage: build
  needs:
    - job: base
      optional: true
  rules:
    - if: '$CAPELLA_BASE == "1"'
      when: always
  variables:
    BASE_IMAGE: base2
    IMAGE: capella/base
  script:
    - *prepare-capella
    - *docker
    # prettier-ignore
    - mv ../capella.tar.gz ./capella/versions/$CAPELLA_VERSION/$BUILD_ARCHITECTURE/capella.tar.gz
    - cp ./eclipse/set_memory_flags.py ./capella/setup/set_memory_flags.py
    - >
      if [[ -n "$(find ../dropins -maxdepth 1 -type d)" ]]; then
        mv ../dropins/* ./capella/versions/$CAPELLA_VERSION/dropins/
      else
        echo "No files to move in dropins"
      fi
    - >
      if [[ -n "$(find ../patches -maxdepth 1 -type f -not -path '*/\.*')" ]];
      then
        mv ../patches/* ./capella/versions/$CAPELLA_VERSION/patches/
      else
        echo "No files to move in patches"
      fi
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $DOCKER_REGISTRY/capella/base:$DOCKER_TAG \
        --build-arg BUILD_TYPE=offline \
        --build-arg CAPELLA_VERSION=$CAPELLA_VERSION \
        --build-arg BUILD_ARCHITECTURE="$BUILD_ARCHITECTURE" \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        capella
    - *push

capella/remote:
  stage: build
  needs:
    - job: capella/base
      optional: true
  rules:
    - if: '$CAPELLA_REMOTE == "1"'
      when: always
  variables:
    BASE_IMAGE: capella/base
    IMAGE: capella/remote
  script:
    - *prepare-capella
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $DOCKER_REGISTRY/capella/remote:$DOCKER_TAG \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        --build-arg XPRA_REGISTRY=$XPRA_REGISTRY \
        remote
    - *push

t4c/client/base:
  stage: build
  needs:
    - job: capella/base
      optional: true
  rules:
    - if: '$T4C_CLIENT_BASE == "1"'
      when: always
  variables:
    BASE_IMAGE: capella/base
    IMAGE: t4c/client/base
  script:
    - *prepare-capella
    - *docker
    - mv ../updateSite/* t4c/updateSite/$CAPELLA_VERSION/
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $DOCKER_REGISTRY/t4c/client/base:$DOCKER_TAG \
        --build-arg CAPELLA_VERSION=$CAPELLA_VERSION \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        t4c
    - *push

t4c/client/remote:
  stage: build
  needs:
    - job: t4c/client/base
      optional: true
  rules:
    - if: '$T4C_CLIENT_REMOTE == "1"'
      when: always
  variables:
    BASE_IMAGE: t4c/client/base
    IMAGE: t4c/client/remote
  script:
    - *prepare-capella
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $DOCKER_REGISTRY/t4c/client/remote:$DOCKER_TAG \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        --build-arg XPRA_REGISTRY=$XPRA_REGISTRY \
        remote
    - *push

t4c/client/remote/pure-variants:
  stage: build
  needs:
    - job: t4c/client/remote
      optional: true
  rules:
    - if: '$CAPELLA_VERSION == "7.0.0"'
      when: never
    - if: '$T4C_CLIENT_REMOTE_PURE_VARIANTS == "1"'
      when: always
  variables:
    BASE_IMAGE: t4c/client/remote
    IMAGE: t4c/client/remote/pure-variants
  script:
    - *prepare-capella
    - *docker
    # prettier-ignore
    - mv ../../../../pure-variants/updateSite/* pure-variants/versions/${PURE_VARIANTS_VERSION:?}
    - |
      docker build $DOCKER_BUILD_ARGS \
      -t $DOCKER_REGISTRY/t4c/client/remote/pure-variants:$DOCKER_TAG \
      --build-arg ECLIPSE_REPOSITORY=${ECLIPSE_REPOSITORY} \
      --build-arg BASE_IMAGE=$BASE_IMAGE \
      --build-arg PURE_VARIANTS_VERSION="$PURE_VARIANTS_VERSION" \
      pure-variants
    - *push

eclipse/base:
  stage: build
  needs:
    - job: base
      optional: true
  rules:
    - if: '$ECLIPSE_BASE == "1"'
      when: always
  variables:
    BASE_IMAGE: base2
    IMAGE: eclipse/base
  script:
    - *prepare-eclipse
    - *docker
    # prettier-ignore
    - mv ../eclipse.tar.gz ./eclipse/versions/$ECLIPSE_VERSION/$BUILD_ARCHITECTURE/eclipse.tar.gz
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t ${IMAGE}:${DOCKER_TAG} \
        --build-arg ECLIPSE_VERSION=${ECLIPSE_VERSION} \
        --build-arg BASE_IMAGE=${BASE_IMAGE} \
        --build-arg ECLIPSE_REPOSITORY=${ECLIPSE_REPOSITORY} \
        eclipse
    - *push

eclipse/remote:
  stage: build
  needs:
    - job: eclipse/base
      optional: true
  rules:
    - if: '$ECLIPSE_REMOTE == "1"'
      when: always
  variables:
    BASE_IMAGE: eclipse/base
    IMAGE: eclipse/remote
  script:
    - *prepare-eclipse
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t ${IMAGE}:${DOCKER_TAG} \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        --build-arg XPRA_REGISTRY=$XPRA_REGISTRY \
        remote
    - *push

eclipse/remote/pure-variants:
  stage: build
  needs:
    - job: eclipse/remote
      optional: true
  rules:
    - if: '$ECLIPSE_REMOTE_PURE_VARIANTS == "1"'
      when: always
  variables:
    BASE_IMAGE: eclipse/remote
    IMAGE: eclipse/remote/pure-variants
  script:
    - *prepare-eclipse-pv
    - *docker
    - mv ../updateSite/* pure-variants/versions/${PURE_VARIANTS_VERSION:?}
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t ${IMAGE}:${DOCKER_TAG} \
        --build-arg ECLIPSE_REPOSITORY=${ECLIPSE_REPOSITORY} \
        --build-arg BASE_IMAGE=${BASE_IMAGE} \
        --build-arg PURE_VARIANTS_VERSION="$PURE_VARIANTS_VERSION" \
        pure-variants
    - *push

papyrus/base:
  stage: build
  needs:
    - job: base
      optional: true
  rules:
    - if: '$PAPYRUS_BASE == "1"'
      when: always
  variables:
    BASE_IMAGE: base2
    IMAGE: papyrus/base
  script:
    - *prepare-papyrus
    - *docker
    - mv ../papyrus.tar.gz ./papyrus/versions/$PAPYRUS_VERSION/papyrus.tar.gz
    - cp ./eclipse/set_memory_flags.py ./papyrus/set_memory_flags.py
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t ${IMAGE}:${DOCKER_TAG} \
        --build-arg ECLIPSE_REPOSITORY=${ECLIPSE_REPOSITORY} \
        --build-arg PAPYRUS_VERSION=$PAPYRUS_VERSION \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        papyrus
    - *push

papyrus/remote:
  stage: build
  needs:
    - job: papyrus/base
      optional: true
  rules:
    - if: '$PAPYRUS_REMOTE == "1"'
      when: always
  variables:
    BASE_IMAGE: papyrus/base
    IMAGE: papyrus/remote
  script:
    - *prepare-papyrus
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t ${IMAGE}:${DOCKER_TAG} \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        --build-arg XPRA_REGISTRY=$XPRA_REGISTRY \
        remote
    - *push

jupyter:
  stage: build
  needs:
    - job: base
      optional: true
  rules:
    - if: '$JUPYTER == "1"'
      when: always
  variables:
    BASE_IMAGE: base2
    IMAGE: jupyter-notebook
  script:
    - *prepare
    - DOCKER_TAG=python-3.11-$GENERAL_IMAGE_TAG
    - *resolve-base-image
    - *github
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $IMAGE:$DOCKER_TAG \
        --build-arg BASE_IMAGE=$BASE_IMAGE \
        jupyter
    - *push
