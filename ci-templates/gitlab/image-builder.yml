# SPDX-FileCopyrightText: Copyright DB InfraGO AG and contributors
# SPDX-License-Identifier: Apache-2.0

variables:
  CAPELLA_BASE:
    value: '0'
    description: 'Build the capella/base image?'
  T4C_CLIENT_BASE:
    value: '0'
    description: 'Build the t4c/client/base image?'
  T4C_CLIENT_REMOTE:
    value: '0'
    description: 'Build the t4c/client/remote image?'
  T4C_CLIENT_REMOTE_PURE_VARIANTS:
    value: '0'
    description: 'Build the t4c/client/remote/pure-variants image?'
  JUPYTER:
    value: '0'
    description: 'Build the jupyter-notebook image?'
  PAPYRUS_REMOTE:
    value: '0'
    description: 'Build the papyrus/remote image?'
  ECLIPSE_REMOTE_PURE_VARIANTS:
    value: '0'
    description: 'Build the eclipse/remote/pure-variants image?'
  BUILD_FOR_LATEST_TAG:
    value: '0'
    description:
      "Fetch the latest tag for the image builder repository and use it as
      revision. If 0, '$CI_COMMIT_REF_NAME' will be used."
  CAPELLA_DOCKER_IMAGES_REVISION:
    value: 'main'
    description:
      'Revision of the Capella Docker images Github repository
      (https://github.com/DSD-DBS/capella-dockerimages)'
  CAPELLA_VERSION:
    value: '6.0.0'
    description:
      'Capella version. Please make sure that a subdirectory with the name of
      the value exists. The value must be valid ASCII and may contain lowercase
      and uppercase letters, digits, underscores, periods and dashes.'
  JUPYTER_VERSION:
    value: 'python-3.11'
    description: 'Python version for the jupyter notebook.'
  PAPYRUS_VERSION:
    value: '6.4.0'
    description: 'Semantic version of Papyrus.'
  ECLIPSE_VERSION:
    value: '4.27'
    description: 'Semantic version of Eclipse.'
  PURE_VARIANTS_VERSION:
    value: '6.0.1'
    description: 'Semantic version of pure::variants.'
  ENVIRONMENT:
    value: 'staging'
    description:
      'Specifies the environment. Must match a key in the config.yml file.'

stages:
  - build
  - test

default:
  image: $DOCKER_REGISTRY/base
  tags:
    - docker

.github: &github
  - git clone https://github.com/DSD-DBS/capella-dockerimages.git /tmp/capella-dockerimages
  - git -C /tmp/capella-dockerimages checkout $CAPELLA_DOCKER_IMAGES_REVISION --
  - cp -R /tmp/capella-dockerimages/* $CI_PROJECT_DIR

.docker: &docker
  - docker info
  # prettier-ignore
  - echo $(cat config.yml | yq -r .environments.$ENVIRONMENT.registry.user) | \
      docker login -u $(sops -d config.yml | yq -r .environments.$ENVIRONMENT.registry.password) --password-stdin $DOCKER_REGISTRY

.sops: &sops
  - apk add sops gpg
  - gpg --import /secrets/private.gpg

.prepare: &prepare
  - *sops
  - (curl -sSL "https://github.com/buildpacks/pack/releases/download/v0.34.2/pack-v0.34.2-linux.tgz" | sudo tar -C /usr/local/bin/ --no-same-owner -xzv pack)
  - DOCKER_REGISTRY=$(cat config.yml | yq -r .environments.$ENVIRONMENT.registry.url)
  - >
    if [[ "$BUILD_FOR_LATEST_TAG" == "1" ]]; then
      git fetch --tags;
      IMAGE_BUILDER_REVISION=$(git describe --tags --abbrev=0);
      git checkout "$IMAGE_BUILDER_REVISION";
    else
      IMAGE_BUILDER_REVISION="$CI_COMMIT_REF_NAME"
    fi
  # prettier-ignore
  - GENERAL_IMAGE_TAG=$(echo $CAPELLA_DOCKER_IMAGES_REVISION | sed 's/[^a-zA-Z0-9.]/-/g')-$IMAGE_BUILDER_REVISION

.prepare-papyrus: &prepare-papyrus
  - *prepare
  - export DOCKER_TAG=$PAPYRUS_VERSION-$GENERAL_IMAGE_TAG
  - *github

.prepare-eclipse: &prepare-eclipse
  - *prepare
  - export DOCKER_TAG=$ECLIPSE_VERSION-$GENERAL_IMAGE_TAG
  - *github

.prepare-eclipse-pv: &prepare-eclipse-pv
  - *prepare
  # prettier-ignore
  - export DOCKER_TAG=$ECLIPSE_VERSION-$PURE_VARIANTS_VERSION-$GENERAL_IMAGE_TAG
  - cd pure-variants
  - *github


builder:
  stage: build
  needs: []
  variables:
    IMAGE: builder
  script:
    - *prepare
    - *github
    - *docker
    - |
      docker build buildpacks/builder:$GENERAL_IMAGE_TAG \
        --build-arg CNB_USER_ID=$(cat config.yml | yq -r ".environments.$ENVIRONMENT.uid")
    - |
      pack builder create $DOCKER_REGISTRY/builder:$GENERAL_IMAGE_TAG \
        --config buildpacks/builder/builder.toml \
        --publish

capella/base:
  stage: build
  needs:
    - job: builder
      optional: true
  rules:
    - if: '$CAPELLA_BASE == "1"'
      when: always
  cache:
    - key: $ENVIRONMENT-$CAPELLA_VERSION
    - paths:
      - previous_image.txt
  variables:
    IMAGE: capella/base
  script:
    - *prepare
    - export DOCKER_TAG=$CAPELLA_VERSION-$GENERAL_IMAGE_TAG
    - *resolve-previous-image
    - *github
    - *docker
    - |
      pack build $DOCKER_REGISTRY/$IMAGE:$DOCKER_TAG \
        --env TOOL=capella \
        --env CAPELLA_VERSION=$CAPELLA_VERSION \
        --uid $(cat config.yml | yq -r ".environments.$ENVIRONMENT.uid") \
        --builder $DOCKER_REGISTRY/builder:$GENERAL_IMAGE_TAG \
        --publish \
        --path ./buildpacks \
        --volume $CI_PROJECT_DIR:/app:ro

capella/remote:
  stage: build
  needs:
    - job: capella/base
      optional: true
  rules:
    - if: '$CAPELLA_REMOTE == "1"'
      when: always
  variables:
    IMAGE: capella/remote
  script:
    - *prepare-capella
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $DOCKER_REGISTRY/capella/remote:$DOCKER_TAG \
        --build-arg XPRA_REGISTRY=$XPRA_REGISTRY \
        remote
    - *push

t4c/client/base:
  stage: build
  needs:
    - job: capella/base
      optional: true
  rules:
    - if: '$T4C_CLIENT_BASE == "1"'
      when: always
  variables:
    IMAGE: t4c/client/base
  script:
    - *prepare-capella
    - *docker
    - mv ../updateSite/* t4c/updateSite/$CAPELLA_VERSION/
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $DOCKER_REGISTRY/t4c/client/base:$DOCKER_TAG \
        --build-arg CAPELLA_VERSION=$CAPELLA_VERSION \
        t4c
    - *push

t4c/client/remote:
  stage: build
  needs:
    - job: t4c/client/base
      optional: true
  rules:
    - if: '$T4C_CLIENT_REMOTE == "1"'
      when: always
  variables:
    IMAGE: t4c/client/remote
  script:
    - *prepare-capella
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $DOCKER_REGISTRY/t4c/client/remote:$DOCKER_TAG \
        --build-arg XPRA_REGISTRY=$XPRA_REGISTRY \
        remote
    - *push
  allow_failure: *allow_failure

t4c/client/remote/pure-variants:
  stage: build
  needs:
    - job: t4c/client/remote
      optional: true
  rules:
    - if: '$T4C_CLIENT_REMOTE_PURE_VARIANTS == "1"'
      when: always
  variables:
    IMAGE: t4c/client/remote/pure-variants
  script:
    - *prepare-capella
    - *docker
    # prettier-ignore
    - mv ../../../../pure-variants/updateSite/* pure-variants/versions/${PURE_VARIANTS_VERSION:?}
    - |
      docker build $DOCKER_BUILD_ARGS \
      -t $DOCKER_REGISTRY/t4c/client/remote/pure-variants:$DOCKER_TAG \
      --build-arg ECLIPSE_REPOSITORY=${ECLIPSE_REPOSITORY} \
      --build-arg PURE_VARIANTS_VERSION="$PURE_VARIANTS_VERSION" \
      pure-variants
    - *push

eclipse/remote:
  stage: build
  needs:
    - job: eclipse/base
      optional: true
  rules:
    - if: '$ECLIPSE_REMOTE == "1"'
      when: always
  variables:
    IMAGE: eclipse/remote
  script:
    - *prepare-eclipse
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t ${IMAGE}:${DOCKER_TAG} \
        --build-arg XPRA_REGISTRY=$XPRA_REGISTRY \
        remote
    - *push

eclipse/pure-variants/remote:
  stage: build
  needs:
    - job: eclipse/remote
      optional: true
  rules:
    - if: '$ECLIPSE_REMOTE_PURE_VARIANTS == "1"'
      when: always
  variables:
    IMAGE: eclipse/remote/pure-variants
  script:
    - *prepare-eclipse-pv
    - *docker
    - mv ../updateSite/* pure-variants/versions/${PURE_VARIANTS_VERSION:?}
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t ${IMAGE}:${DOCKER_TAG} \
        --build-arg ECLIPSE_REPOSITORY=${ECLIPSE_REPOSITORY} \
        --build-arg PURE_VARIANTS_VERSION="$PURE_VARIANTS_VERSION" \
        pure-variants
    - *push

papyrus/remote:
  stage: build
  needs:
    - job: papyrus/base
      optional: true
  rules:
    - if: '$PAPYRUS_REMOTE == "1"'
      when: always
  variables:
    IMAGE: papyrus/remote
  script:
    - *prepare-papyrus
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t ${IMAGE}:${DOCKER_TAG} \
        --build-arg XPRA_REGISTRY=$XPRA_REGISTRY \
        remote
    - *push

jupyter:
  stage: build
  needs:
    - job: base
      optional: true
  rules:
    - if: '$JUPYTER == "1"'
      when: always
  variables:
    IMAGE: jupyter-notebook
  script:
    - *prepare
    - DOCKER_TAG=python-3.11-$GENERAL_IMAGE_TAG
    - *resolve-base-image
    - *github
    - *docker
    - |
      docker build $DOCKER_BUILD_ARGS \
        -t $IMAGE:$DOCKER_TAG \
        jupyter-notebook
    - *push

.local-git-server: &local-git-server
  - |
    docker build $DOCKER_BUILD_ARGS \
      -t local-git-server \
      --build-arg BASE_IMAGE=$(cat config.yml | yq -r '.["base-images"].debian') \
      tests/local-git-server

test:
  stage: test
  rules:
    - if: '$T4C_CLIENT_REMOTE == "1"'
      when: always
  script:
    - export LOCAL_GIT_TAG=latest
    - export DOCKER_PREFIX=${DOCKER_REGISTRY:?}/
    - apk add jq
    # This command lists docker containers, identifies the current job and writes the network ID of the current container into the DOCKER_NETWORK variable.
    # prettier-ignore
    - export DOCKER_NETWORK=$(docker inspect -f "{{json .NetworkSettings.Networks }}" $(docker ps -q -f "label=com.gitlab.gitlab-runner.job.id=$CI_JOB_ID" -f "label=com.gitlab.gitlab-runner.type=build") | jq -r 'keys[0]' | head -n 1)
    - *local-git-server
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install -e '.[test]'
    - cd tests
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/$(cat config.yml | yq -r '.["test-data-repository"]') test-data-repo
    - apk add yq envsubst
    - export T4C_SERVER_REGISTRY=$(cat config.yml | yq -r '.["t4c-server"].registry')
    - export T4C_SERVER_TAG=$(cat config.yml | yq -r '.["t4c-server"].tag' | envsubst)
    # prettier-ignore
    - pytest -o log_cli=true -s -m t4c_server test_backups.py test_exporter_local.py test_exporter_git.py test_t4c_repository_injection.py
