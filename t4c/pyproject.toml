# SPDX-FileCopyrightText: Copyright DB InfraGO AG and contributors
# SPDX-License-Identifier: Apache-2.0

[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
dynamic = ["version"]

name = "t4c-cli"
requires-python = ">=3.11, <3.13"
license = { text = "Apache-2.0" }
authors = [{ name = "DB InfraGO AG" }]
keywords = []
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "License :: OSI Approved :: Apache Software License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dependencies = ["PyYAML", "click", "lxml"]

[project.urls]
Homepage = "https://github.com/DSD-DBS/capella-dockerimages"

[project.optional-dependencies]
dev = [
  "ruff",
  "mypy",
  "pytest",
  "types-PyYAML",
  "types-lxml",
]

[tool.ruff]
line-length = 79

[tool.ruff.lint]
extend-select = [
  "ARG",    # flake8-unused-arguments
  "B",      # flake8-bugbear
  "C4",     # flake8-comprehensions
  "C90",    # mccabe
  "DTZ",    # flake8-datetimez
  "ERA",    # eradicate
  "FA",     # flake8-future-annotations
  "FBT",    # flake8-boolean-trap
  "FIX",    # flake8-fixme
  "FURB",   # refurb
  "G",      # flake8-logging-format
  "I",      # isort
  "ICN",    # flake8-import-conventions
  "ISC001", # "Implicitly concatenated string literals on one line"
  "ISC003", # "Explicitly concatenated string should be implicitly concatenated"
  "LOG",    # flake8-logging
  "PIE",    # flake8-pie
  "PL",     # pylint
  "PT",     # flake8-pytest-style
  "RET",    # flake8-return
  "RUF",    # ruff
  "SIM",    # flake8-simplify
  "TC005", # "Found empty type-checking block"
  "T1",     # flake8-debugger
  "UP",     # pyupgrade
  "YTT",    # flake8-2020
]
extend-ignore = [
  "DTZ001",  # `tzinfo=None` passed to `datetime.datetime()`
  "DTZ005",  # `tz=None` passed to `datetime.datetime.now()`
  "E402",    # Module level import not at top of file
  "ERA001",  # Remove commented-out code
  "F403",    # `from _ import *` used; unable to detect undefined names
  "F405",    # `_` may be undefined, or defined from star imports
  "FBT001",  # Boolean-typed positional argument in function definition
  "FBT002",  # Boolean default positional argument in function definition
  "LOG002",  # Use `__name__` with `logging.getLogger()`
  "PLC0414", # Import alias does not rename original package # used for explicit reexports
  "PLR0904", # Too many public methods
  "PLR0911", # Too many return statements
  "PLR0912", # Too many branches
  "PLR0913", # Too many arguments in function definition
  "PLR0914", # Too many local variables
  "PLR0915", # Too many statements
  "PLR0916", # Too many Boolean expressions
  "PLR0917", # Too many positional arguments
  "PLR2004", # Magic value used in comparison
  "SIM108",  # Use ternary operator instead of `if`-`else`-block
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"
ignore-decorators = ["typing.overload"]

[tool.ruff.lint.mccabe]
max-complexity = 14

[project.scripts]
backup = "t4c_cli.backup:backup"
exporter = "t4c_cli.export:export"

[tool.coverage.run]
branch = true
command_line = "-m pytest"
source = ["t4c_cli"]

[tool.coverage.report]
exclude_also = [
  'if t\.TYPE_CHECKING:',
  'class .*\bt\.Protocol\):',
  '@abc\.abstractmethod',
  '@t\.overload',
]
skip_covered = true


[tool.mypy]
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
show_error_codes = true
warn_redundant_casts = true
warn_unreachable = true
python_version = "3.11"

[[tool.mypy.overrides]]
# Untyped third party libraries
module = [
  # ...
]
ignore_missing_imports = true

[tool.pytest.ini_options]
addopts = """
  --import-mode=importlib
  --strict-config
  --strict-markers
"""
testpaths = ["tests"]
xfail_strict = true

[tool.setuptools]
platforms = ["any"]
zip-safe = false

[tool.setuptools.package-data]
"*" = ["py.typed"]

[tool.setuptools.packages.find]
include = ["t4c_cli", "t4c_cli.*"]
